<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="class_bean_class" kind="class" language="C++" prot="public">
    <compoundname>BeanClass</compoundname>
      <sectiondef kind="user-defined">
      <header>Accelerometer</header>
      <description><para>Read acceleration values and configure the accelerometer&apos;s sensitivity. </para></description>
      <memberdef kind="function" id="class_bean_class_1a9d2f98bbb1b8a715c0fe549c438f44ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::enableMotionEvent</definition>
        <argsstring>(AccelEventTypes events)</argsstring>
        <name>enableMotionEvent</name>
        <param>
          <type>AccelEventTypes</type>
          <declname>events</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable accelerometer interrupts</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>accepts</parametername>
</parameternamelist>
<parameterdescription>
<para>an event of type AccelEventTypes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1a0f9fb65a465070f9f3e9cdf4f2687bdc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::disableMotionEvents</definition>
        <argsstring>()</argsstring>
        <name>disableMotionEvents</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disables all currently enabled accelerometer interrupts </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1a75492018fa92ad32c06a12ce456dc74c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BeanClass::checkMotionEvent</definition>
        <argsstring>(AccelEventTypes events)</argsstring>
        <name>checkMotionEvent</name>
        <param>
          <type>AccelEventTypes</type>
          <declname>events</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks to see if a particular acclerometer interrupt has occured. If the event occurs it sets a flag that can only be cleared by reading this function.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>accepts</parametername>
</parameternamelist>
<parameterdescription>
<para>an event of type AccelEventTypes</para></parameterdescription>
</parameteritem>
</parameterlist>
<heading level="1">Examples</heading>
</para><para>This example sets off police lights on the Bean if motion is detected:</para><para><programlisting><codeline><highlight class="normal">//<sp/>Create<sp/>boolean<sp/>to<sp/>run<sp/>loop<sp/>persistently</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>motionDetected<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>setup()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Enable<sp/>low-g<sp/>motion<sp/>events<sp/>to<sp/>be<sp/>detected</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.enableMotionEvent(ANY_MOTION_EVENT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Make<sp/>sure<sp/>accelerometer<sp/>is<sp/>in<sp/>normal<sp/>power<sp/>mode</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(Bean.getAccelerometerPowerMode()<sp/>!=<sp/>VALUE_NORMAL_MODE)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>accelerometer<sp/>power<sp/>mode<sp/>to<sp/>normal</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setAccelerometerPowerMode(VALUE_NORMAL_MODE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Initially<sp/>set<sp/>LED<sp/>to<sp/>blank</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.setLed(0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">void<sp/>loop()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Check<sp/>for<sp/>low-g<sp/>movement</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(Bean.checkMotionEvent(ANY_MOTION_EVENT)<sp/>&amp;&amp;<sp/>!motionDetected)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motionDetected<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>if<sp/>(!Bean.checkMotionEvent(ANY_MOTION_EVENT)<sp/>&amp;&amp;<sp/>!motionDetected)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.sleep(2000);<sp/><sp/>//<sp/>Sleep<sp/>for<sp/>2<sp/>seconds<sp/>before<sp/>rechecking</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(motionDetected)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>If<sp/>motion<sp/>is<sp/>detected,<sp/>blue/red<sp/>lights<sp/>will<sp/>flash<sp/>continuously</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(255,<sp/>0,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.sleep(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(0,<sp/>0,<sp/>255);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.sleep(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(255,<sp/>0,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.sleep(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(0,<sp/>0,<sp/>255);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.sleep(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(255,<sp/>0,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.sleep(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(0,<sp/>0,<sp/>255);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1a00cf73de73eeb00d220efa32a830d6ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t BeanClass::getAccelerationX</definition>
        <argsstring>(void)</argsstring>
        <name>getAccelerationX</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current value of the Bean accelerometer X axis.</para><para><simplesect kind="return"><para>a 10-bit value corresponding to the current X axis acceleration </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1aba0554ca18558748b67205bd5bdcaeac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t BeanClass::getAccelerationY</definition>
        <argsstring>(void)</argsstring>
        <name>getAccelerationY</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current value of the Bean accelerometer Y axis.</para><para><simplesect kind="return"><para>a 10-bit value corresponding to the current Y axis acceleration </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1a5c977e7b185ebc038335228d8ef1d0b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t BeanClass::getAccelerationZ</definition>
        <argsstring>(void)</argsstring>
        <name>getAccelerationZ</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current value of the Bean accelerometer Z axis.</para><para><simplesect kind="return"><para>a 10-bit value corresponding to the current Z axis acceleration </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1a53f2174dd2f3c2907acc3355cef64842" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AccelerationReading</type>
        <definition>AccelerationReading BeanClass::getAcceleration</definition>
        <argsstring>(void)</argsstring>
        <name>getAcceleration</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current value of all axes and the current sensitivity setting from the Bean accelerometer.</para><para><simplesect kind="return"><para>an AccelerationReading object containing current acceleration and sensitivity </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1a47244506c985ef7aead3695811002ad2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::accelRegisterWrite</definition>
        <argsstring>(uint8_t reg, uint8_t value)</argsstring>
        <name>accelRegisterWrite</name>
        <param>
          <type>uint8_t</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Low level function for writing directly to the accelerometers registers.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>the register to write to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to write to the register </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1a3e743eb8cc8e5e04364f53801b8fe83e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BeanClass::accelRegisterRead</definition>
        <argsstring>(uint8_t reg, uint8_t length, uint8_t *value)</argsstring>
        <name>accelRegisterRead</name>
        <param>
          <type>uint8_t</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Low level function for reading the accelerometers register directly</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>the register to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes to read starting at that register </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to a user supplied array to fill with values </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of bytes actually read</para></simplesect>
<heading level="1">Examples</heading>
</para><para>This example uses a Bean as a motion alarm by reading/writing to the accelerometer register directly:</para><para><programlisting><codeline><highlight class="normal">//<sp/>Create<sp/>boolean<sp/>to<sp/>run<sp/>loop<sp/>persistently</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>motionDetected<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>setup()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Enable<sp/>low-g<sp/>motion<sp/>events<sp/>to<sp/>be<sp/>detected</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.enableMotionEvent(ANY_MOTION_EVENT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>(The<sp/>next<sp/>two<sp/>lines<sp/>are<sp/>equivalent<sp/>to<sp/>&quot;uint8_t<sp/>value<sp/>=<sp/>Bean.getAccelerometerPowerMode()&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint8_t<sp/>value;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.accelRegisterRead(REG_POWER_MODE_X11,<sp/>1,<sp/>&amp;value);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(value<sp/>!=<sp/>VALUE_NORMAL_MODE)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>accelerometer<sp/>power<sp/>mode<sp/>to<sp/>normal<sp/>power<sp/>mode<sp/>if<sp/>it<sp/>isn&apos;t<sp/>already</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>(This<sp/>is<sp/>the<sp/>same<sp/>as<sp/>&quot;Bean.setAccelerometerPowerMode(VALUE_NORMAL_MODE)&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.accelRegisterWrite(REG_POWER_MODE_X11,<sp/>VALUE_NORMAL_MODE);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">void<sp/>loop()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Check<sp/>for<sp/>low-g<sp/>movement</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(Bean.checkMotionEvent(ANY_MOTION_EVENT)<sp/>&amp;&amp;<sp/>!motionDetected)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>motionDetected<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>if<sp/>(!Bean.checkMotionEvent(ANY_MOTION_EVENT)<sp/>&amp;&amp;<sp/>!motionDetected)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.sleep(2000);<sp/><sp/>//<sp/>Sleep<sp/>for<sp/>2<sp/>seconds<sp/>before<sp/>rechecking</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(motionDetected)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>If<sp/>motion<sp/>is<sp/>detected,<sp/>blue/red<sp/>lights<sp/>will<sp/>flash<sp/>continuously</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(255,<sp/>0,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.sleep(500);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(0,<sp/>0,<sp/>255);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.sleep(500);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(255,<sp/>0,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.sleep(500);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(0,<sp/>0,<sp/>255);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.sleep(500);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(255,<sp/>0,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.sleep(500);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(0,<sp/>0,<sp/>255);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.sleep(500);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(&quot;Motion<sp/>has<sp/>been<sp/>detected;<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1ad08dec6f240de8a53f110ddf066f6ab2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t BeanClass::getAccelerationRange</definition>
        <argsstring>(void)</argsstring>
        <name>getAccelerationRange</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current sensitivity setting of the Bean accelerometer.</para><para><simplesect kind="return"><para>2, 4, 8, or 16, corresponding to ±2g, ±4g, ±8g, or ±16g </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1acb8e9a741e2538393256f95d27c4571d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::setAccelerationRange</definition>
        <argsstring>(uint8_t range)</argsstring>
        <name>setAccelerationRange</name>
        <param>
          <type>uint8_t</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Configure the sensitivity of the Bean accelerometer.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>2, 4, 8, or 16, corresponding to ±2g, ±4g, ±8g, or ±16g</para></parameterdescription>
</parameteritem>
</parameterlist>
<heading level="1">Examples</heading>
</para><para>This example prints out the acceleration values associated with high and low g-force values:</para><para><programlisting><codeline><highlight class="normal">void<sp/>setup()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Enable<sp/>motion<sp/>events<sp/>to<sp/>see<sp/>how<sp/>they&apos;re<sp/>calibrated</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.enableMotionEvent(LOW_G_EVENT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.enableMotionEvent(HIGH_G_EVENT);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Configure<sp/>accelerometer<sp/>to<sp/>sense<sp/>±16g<sp/>if<sp/>it&apos;s<sp/>not<sp/>set<sp/>already</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(Bean.getAccelerationRange()<sp/>!=<sp/>16)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setAccelerationRange(16);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">void<sp/>loop()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Sleep<sp/>forever<sp/>while<sp/>transmitting<sp/>iBeacon<sp/>location<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(Bean.checkMotionEvent(HIGH_G_EVENT))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(&quot;High-g<sp/>event<sp/>detected:<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printAcceleration(Bean.getAcceleration());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Blink<sp/>green<sp/>LED</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(0,<sp/>255,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.sleep(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>if<sp/>(Bean.checkMotionEvent(LOW_G_EVENT))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(&quot;Low-g<sp/>event<sp/>detected:<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printAcceleration(Bean.getAcceleration());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Blink<sp/>yellow<sp/>LED</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(255,<sp/>255,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.sleep(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(&quot;No<sp/>movement<sp/>detected:<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printAcceleration(Bean.getAcceleration());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Blink<sp/>red<sp/>LED</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(255,<sp/>0,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.sleep(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.sleep(1000);<sp/><sp/>//<sp/>Sleep<sp/>and<sp/>recheck<sp/>every<sp/>second</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">void<sp/>printAcceleration(AccelerationReading<sp/>acceleration)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Print<sp/>axes<sp/>of<sp/>acceleration<sp/>in<sp/>a<sp/>nice-looking<sp/>way</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.print(&quot;(x=<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.print(acceleration.xAxis);<sp/><sp/>//<sp/>Same<sp/>as<sp/>getAccelerationX()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.print(&quot;,<sp/>y=<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.print(acceleration.yAxis);<sp/><sp/>//<sp/>Same<sp/>as<sp/>getAccelerationY()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.print(&quot;,<sp/>z=<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.print(acceleration.zAxis);<sp/><sp/>//<sp/>Same<sp/>as<sp/>getAccelerationZ()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.println(&quot;)&quot;);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1a4eebb09ead4b598ef56c359ed14141be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::setAccelerometerPowerMode</definition>
        <argsstring>(uint8_t mode)</argsstring>
        <name>setAccelerometerPowerMode</name>
        <param>
          <type>uint8_t</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set power mode of the accelerometer</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>the power mode of the accelerometer</para></parameterdescription>
</parameteritem>
</parameterlist>
Power modes: Normal mode: 0x00 (~140uA) Suspend mode: 0x80 (~0.5uA) Low Power 10ms: 0x54 (~16.4uA) Low Power 100ms: 0x5A (~2.3uA) Low Power 1s: 0x5E (~0.7uA) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="214" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1afb4f9a75f687547ff8f6cb4146ab30fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t BeanClass::getAccelerometerPowerMode</definition>
        <argsstring>()</argsstring>
        <name>getAccelerometerPowerMode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get power mode of the accelerometer</para><para><simplesect kind="return"><para>the power mode of the accelerometer</para></simplesect>
Power modes: Normal mode: 0x00 (~140uA) Suspend mode: 0x80 (~0.5uA) Low Power 10ms: 0x54 (~16.4uA) Low Power 100ms: 0x5A (~2.3uA) Low Power 1s: 0x5E (~0.7uA) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="227" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>LED</header>
      <description><para>Set the RGB LED color and check what it&apos;s currently showing. </para></description>
      <memberdef kind="function" id="class_bean_class_1a7af1f9d1edb112f761db9b69686b5a5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::setLed</definition>
        <argsstring>(uint8_t red, uint8_t green, uint8_t blue)</argsstring>
        <name>setLed</name>
        <param>
          <type>uint8_t</type>
          <declname>red</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>green</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>blue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set intensity values for the color channels of the Bean RGB LED. 0 is off and 255 is on.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>red</parametername>
</parameternamelist>
<parameterdescription>
<para>the intensity of the red LED. 0 is off and 255 is on.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>green</parametername>
</parameternamelist>
<parameterdescription>
<para>the intensity of the green LED. 0 is off and 255 is on.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blue</parametername>
</parameternamelist>
<parameterdescription>
<para>the intensity of the blue LED. 0 is off and 255 is on.</para></parameterdescription>
</parameteritem>
</parameterlist>
<heading level="1">Examples</heading>
</para><para>This example sets the LED to white (all channels on, full intensity):</para><para><programlisting><codeline></codeline>
<codeline><highlight class="normal">void<sp/>setup()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.setLed(255,<sp/>255,<sp/>255);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>loop()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.sleep(1000);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="252" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1ab73794fbf27d0297ead453ca60ac4aaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>LedReading</type>
        <definition>LedReading BeanClass::getLed</definition>
        <argsstring>(void)</argsstring>
        <name>getLed</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get current intensity values for the color channels of the Bean RGB LED.</para><para><simplesect kind="return"><para><computeroutput>LedReading</computeroutput> struct that contains an integer representation of each color.</para></simplesect>
<heading level="1">Examples</heading>
</para><para>This example shows the usage of the <ref refid="class_bean_class_1ab73794fbf27d0297ead453ca60ac4aaf" kindref="member">getLed()</ref> function and how to interperet the return value.</para><para><programlisting><codeline><highlight class="normal">void<sp/>setup()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Serial<sp/>port<sp/>is<sp/>initialized<sp/>automatically;<sp/>we<sp/>don&apos;t<sp/>have<sp/>to<sp/>do<sp/>anything</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>loop()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>LedReading<sp/>rgbSetting<sp/>=<sp/>Bean.getLed();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.print(&quot;<sp/><sp/>Red:<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.println(rgbSetting.red);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.print(&quot;Green:<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.println(rgbSetting.green);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.print(&quot;<sp/>Blue:<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.println(rgbSetting.blue);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.sleep(2000);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="265" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1aea8736bf91c03de609233ddb270fb77d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t BeanClass::getLedRed</definition>
        <argsstring>(void)</argsstring>
        <name>getLedRed</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get intensity of the red channel of the Bean RGB LED. 0 is off and 255 is on.</para><para><simplesect kind="return"><para>0 for off and 255 for on. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="272" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1a5619292a562731e94f97e93432ab3639" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t BeanClass::getLedGreen</definition>
        <argsstring>(void)</argsstring>
        <name>getLedGreen</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get intensity of the green channel of the Bean RGB LED. 0 is off and 255 is on.</para><para><simplesect kind="return"><para>0 for off and 255 for on. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1a8dcd68a87dc75dd0fe912483cc05fa43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t BeanClass::getLedBlue</definition>
        <argsstring>(void)</argsstring>
        <name>getLedBlue</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get intensity of the blue channel of the Bean RGB LED. 0 is off and 255 is on.</para><para><simplesect kind="return"><para>0 for off and 255 for on. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="286" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1adfc2642320c53819c83bbaa59bbcef9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::setLedRed</definition>
        <argsstring>(uint8_t intensity)</argsstring>
        <name>setLedRed</name>
        <param>
          <type>uint8_t</type>
          <declname>intensity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set intensity of the red channel of the Bean RGB LED. 0 is off and 255 is on.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>intensity</parametername>
</parameternamelist>
<parameterdescription>
<para>the intensity of the red LED. 0 is off and 255 is on. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="293" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1ae1955c0312d1fa90bfeb847dada48c8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::setLedGreen</definition>
        <argsstring>(uint8_t intensity)</argsstring>
        <name>setLedGreen</name>
        <param>
          <type>uint8_t</type>
          <declname>intensity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set intensity of the green channel of the Bean RGB LED. 0 is off and 255 is on.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>intensity</parametername>
</parameternamelist>
<parameterdescription>
<para>the intensity of the green LED. 0 is off and 255 is on. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="300" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1ac09c0f3cea6025e2e12e8b6c5419434b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::setLedBlue</definition>
        <argsstring>(uint8_t intensity)</argsstring>
        <name>setLedBlue</name>
        <param>
          <type>uint8_t</type>
          <declname>intensity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set intensity of the blue channel of the Bean RGB LED. 0 is off and 255 is on.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>intensity</parametername>
</parameternamelist>
<parameterdescription>
<para>the intensity of the blue LED. 0 is off and 255 is on. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="307" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Observer</header>
      <description><para>Functions related to Observer mode. Observer role allows the Bean to listen for advertisements. As a peripheral, the Bean cannot send scan response requests, but it can listen for undirected advertisements. Paired with the custom advertising role, you can have two Beans interact with each other. This role works even when the Bean is connected. </para></description>
      <memberdef kind="function" id="class_bean_class_1a5aa91cc9c0a3e17da864978845735ded" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BeanClass::getObserverMessage</definition>
        <argsstring>(ObserverAdvertisementInfo *message, unsigned long timeout)</argsstring>
        <name>getObserverMessage</name>
        <param>
          <type>ObserverAdvertisementInfo *</type>
          <declname>message</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Listens for advertisements and fills an ObserverAdvertisementInfo message with the first advertisement it sees This function blocks until it receives a message or times out.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>message</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to a message object supplied by the user </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>how long in milliseconds to listen for an advertisement </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1 if there was a failure, 1 if there was a success</para></simplesect>
<heading level="1">Examples</heading>
</para><para>This sketch (observer.ino) demonstrates Bean&apos;s observer role functionality.</para><para>When a Bean running this sketch is near a Bean running advertiser.ino, it will change its LED to reflect the state of the LED on the advertising Bean.</para><para><programlisting><codeline><highlight class="normal">void<sp/>setup()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Serial<sp/>port<sp/>is<sp/>initialized<sp/>automatically;<sp/>we<sp/>don&apos;t<sp/>have<sp/>to<sp/>do<sp/>anything</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">uint8_t<sp/>expectedPacket[]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>general<sp/>discoverable<sp/>mode<sp/>advertises<sp/>indefinitely</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0x02,<sp/><sp/>//<sp/>length<sp/>of<sp/>this<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>GAP_ADTYPE_FLAGS,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>GAP_ADTYPE_FLAGS_GENERAL<sp/>|<sp/>GAP_ADTYPE_FLAGS_BREDR_NOT_SUPPORTED,</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>two-byte<sp/>broadcast</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0x03,<sp/><sp/>//<sp/>length<sp/>of<sp/>this<sp/>data<sp/>including<sp/>the<sp/>data<sp/>type<sp/>byte</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>GAP_ADTYPE_MANUFACTURER_SPECIFIC,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0xAC<sp/><sp/>//<sp/>arbitrary<sp/>data<sp/>so<sp/>we<sp/>can<sp/>make<sp/>sure<sp/>this<sp/>is</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>the<sp/>Bean<sp/>we&apos;re<sp/>looking<sp/>for</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>loop()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>start<sp/>=<sp/>millis();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>ObserverAdvertisementInfo<sp/>info;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>res<sp/>=<sp/>Bean.getObserverMessage(&amp;info,<sp/>2000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(res<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(info.eventType);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(&apos;,&apos;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(info.addrType);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(&apos;,&apos;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(&quot;addr:<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>6;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(info.addr[i]);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(&apos;,&apos;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(&quot;<sp/><sp/>advData:<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>info.dataLen;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(info.advData[i],<sp/>HEX);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Serial.print(&apos;,&apos;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>check<sp/>to<sp/>see<sp/>if<sp/>this<sp/>packet<sp/>is<sp/>form<sp/>the<sp/>custom<sp/>advertiser</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>isEqual<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>sizeof(expectedPacket)<sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(expectedPacket[i]<sp/>!=<sp/>info.advData[i])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isEqual<sp/>=<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(isEqual)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(&quot;Custom<sp/>adv<sp/>found&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(info.advData[6]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bean.setLedGreen(60);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bean.setLedGreen(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="334" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Scratch</header>
      <description><para>Read and write arbitrary data using pre-defined BLE characteristics.</para><para>Scratch characteristics are Bluetooth Low Energy characteristics that Bean provides for arbitrary use by developers. Each characteristic can hold up to 20 bytes due to BLE restrictions.</para><para>Scratch characteristics will trigger Notify events on BLE Central clients when they are changed by Bean&apos;s Arduino sketch. Bean sketches must poll to find out when a client changes scratch characteristic data.</para><para>Bean and Bean+ have five scratch characteristics. All scratch chars are contained in a single BLE service.</para><para><itemizedlist>
<listitem><para><bold>Scratch Service UUID:</bold> <computeroutput>a495ff20-c5b1-4b44-b512-1370f02d74de</computeroutput></para></listitem><listitem><para><bold>Scratch Characteristic UUIDs:</bold><orderedlist>
<listitem><para><computeroutput>a495ff21-c5b1-4b44-b512-1370f02d74de</computeroutput></para></listitem><listitem><para><computeroutput>a495ff22-c5b1-4b44-b512-1370f02d74de</computeroutput></para></listitem><listitem><para><computeroutput>a495ff23-c5b1-4b44-b512-1370f02d74de</computeroutput></para></listitem><listitem><para><computeroutput>a495ff24-c5b1-4b44-b512-1370f02d74de</computeroutput></para></listitem><listitem><para><computeroutput>a495ff25-c5b1-4b44-b512-1370f02d74de</computeroutput></para></listitem></orderedlist>
</para></listitem></itemizedlist>
</para><para>In the below methods, behavior is undefined when the <computeroutput>bank</computeroutput> parameter is not <computeroutput>1</computeroutput>, <computeroutput>2</computeroutput>, <computeroutput>3</computeroutput>, <computeroutput>4</computeroutput>, or <computeroutput>5</computeroutput>. </para></description>
      <memberdef kind="function" id="class_bean_class_1a6a8c9b33ada6cc7da1d9229dd0d7849e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BeanClass::setScratchData</definition>
        <argsstring>(uint8_t bank, const uint8_t *data, uint8_t dataLength)</argsstring>
        <name>setScratchData</name>
        <param>
          <type>uint8_t</type>
          <declname>bank</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>dataLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the data in a scratch characteristic. Triggers a BLE Notify event for connected clients.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bank</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the destination scratch char: <computeroutput>1</computeroutput>, <computeroutput>2</computeroutput>, <computeroutput>3</computeroutput>, <computeroutput>4</computeroutput>, or <computeroutput>5</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of <computeroutput>byte</computeroutput>s or <computeroutput>uint8_t</computeroutput>s to be copied into the scratch char </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataLength</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to copy from <computeroutput>data</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Success: false if <computeroutput>dataLength</computeroutput> is greater than 20, true otherwise</para></simplesect>
<heading level="1">Examples</heading>
</para><para>This example reads two of Bean&apos;s analog pins and writes the values to two scratch characteristics:</para><para><programlisting><codeline><highlight class="normal">void<sp/>setup()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>We<sp/>don&apos;t<sp/>need<sp/>to<sp/>set<sp/>anything<sp/>up<sp/>here</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>loop()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Create<sp/>a<sp/>2-byte<sp/>buffer<sp/>to<sp/>hold<sp/>our<sp/>analog<sp/>value<sp/>when<sp/>we<sp/>split<sp/>it<sp/>into<sp/>bytes</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint8_t<sp/>buffer[2];</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Read<sp/>10-bit<sp/>values<sp/>from<sp/>A0<sp/>and<sp/>A1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint16_t<sp/>an0<sp/>=<sp/>analogRead(A0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint16_t<sp/>an1<sp/>=<sp/>analogRead(A1);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Split<sp/>A0&apos;s<sp/>10-bit<sp/>value<sp/>into<sp/>two<sp/>bytes<sp/>and<sp/>store<sp/>in<sp/>the<sp/>buffer:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>[&lt;least<sp/>significant<sp/>8<sp/>bits&gt;,<sp/>&lt;most<sp/>significant<sp/>two<sp/>bits&gt;]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>buffer[0]<sp/>=<sp/>an0<sp/>&amp;<sp/>0xFF;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>buffer[1]<sp/>=<sp/>an0<sp/>&gt;&gt;<sp/>8;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Store<sp/>those<sp/>two<sp/>bytes<sp/>in<sp/>scratch<sp/>characteristic<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.setScratchData(1,<sp/>buffer,<sp/>2);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Do<sp/>the<sp/>same<sp/>as<sp/>above:<sp/>split<sp/>A1...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>buffer[0]<sp/>=<sp/>an1<sp/>&amp;<sp/>0xFF;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>buffer[1]<sp/>=<sp/>an1<sp/>&gt;&gt;<sp/>8;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>...and<sp/>store<sp/>in<sp/>scratch<sp/>characteristic<sp/>2</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.setScratchData(2,<sp/>buffer,<sp/>2);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Sleep<sp/>for<sp/>3<sp/>seconds</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>If<sp/>you&apos;re<sp/>connected<sp/>to<sp/>this<sp/>Bean<sp/>in<sp/>LightBlue,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>you<sp/>should<sp/>see<sp/>Notify<sp/>events<sp/>firing<sp/>every<sp/>3<sp/>seconds</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.sleep(10000);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="376" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1a74e7107c64bec91d676cdd534ac6bb4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BeanClass::setScratchNumber</definition>
        <argsstring>(uint8_t bank, uint32_t data)</argsstring>
        <name>setScratchNumber</name>
        <param>
          <type>uint8_t</type>
          <declname>bank</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write a 32-bit (four-byte) value into a scratch characteristic. Triggers a BLE Notify event for connected clients.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bank</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the destination scratch char: <computeroutput>1</computeroutput>, <computeroutput>2</computeroutput>, <computeroutput>3</computeroutput>, <computeroutput>4</computeroutput>, or <computeroutput>5</computeroutput> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The 32-bit value to be written into the scratch char</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Success: always returns true, since all 32-bit numbers are under 20 bytes in length</para></simplesect>
<heading level="1">Examples</heading>
</para><para>This example writes a value to and reads a value from a scratch characteristic:</para><para><programlisting><codeline><highlight class="normal">void<sp/>setup()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Serial<sp/>port<sp/>is<sp/>initialized<sp/>automatically;<sp/>we<sp/>don&apos;t<sp/>have<sp/>to<sp/>do<sp/>anything</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>loop()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Write<sp/>a<sp/>32-bit<sp/>number<sp/>to<sp/>scratch<sp/>characteristic<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Connect<sp/>to<sp/>Bean<sp/>with<sp/>LightBlue<sp/>to<sp/>view<sp/>the<sp/>hex<sp/>bytes</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.setScratchNumber(1,<sp/>millis());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Then<sp/>wait<sp/>a<sp/>bit</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.sleep(250);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Read<sp/>the<sp/>number<sp/>back<sp/>and<sp/>print<sp/>it<sp/>via<sp/>serial</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>number<sp/>=<sp/>Bean.readScratchNumber(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.print(&quot;Number:<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.println(number);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Then<sp/>wait<sp/>a<sp/>bit<sp/>and<sp/>try<sp/>again</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.sleep(750);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="392" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1af5b9029cc816e5ce21263be975aa6050" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ScratchData</type>
        <definition>ScratchData BeanClass::readScratchData</definition>
        <argsstring>(uint8_t bank)</argsstring>
        <name>readScratchData</name>
        <param>
          <type>uint8_t</type>
          <declname>bank</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read the data from a scratch characteristic.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bank</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the source scratch char: <computeroutput>1</computeroutput>, <computeroutput>2</computeroutput>, <computeroutput>3</computeroutput>, <computeroutput>4</computeroutput>, or <computeroutput>5</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The contents of the scratch characteristic</para></simplesect>
<heading level="1">Examples</heading>
</para><para>This example polls a scratch characteristic and blinks Bean&apos;s LED if the value changes:</para><para><programlisting><codeline><highlight class="normal">//<sp/>Holds<sp/>the<sp/>last<sp/>data<sp/>we<sp/>read<sp/>from<sp/>scratch<sp/>characteristic<sp/>1</highlight></codeline>
<codeline><highlight class="normal">ScratchData<sp/>lastScratch;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Compare<sp/>two<sp/>ScratchData<sp/>objects.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Return<sp/>true<sp/>if<sp/>they<sp/>contain<sp/>the<sp/>same<sp/>bytes<sp/>in<sp/>the<sp/>same<sp/>order.</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>compareScratch(ScratchData<sp/>*scratch1,<sp/>ScratchData<sp/>*scratch2)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>If<sp/>they<sp/>contain<sp/>different<sp/>numbers<sp/>of<sp/>bytes,<sp/>they<sp/>can&apos;t<sp/>be<sp/>equal,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>so<sp/>return<sp/>false</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(scratch1-&gt;length<sp/>!=<sp/>scratch2-&gt;length)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Compare<sp/>each<sp/>byte<sp/>in<sp/>order<sp/>and<sp/>return<sp/>false<sp/>if<sp/>two<sp/>bytes<sp/>don&apos;t<sp/>match</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(int<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>scratch1-&gt;length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(scratch1-&gt;data[i]<sp/>!=<sp/>scratch2-&gt;data[i])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>If<sp/>we&apos;ve<sp/>gotten<sp/>this<sp/>far,<sp/>every<sp/>byte<sp/>in<sp/>both<sp/>ScratchData<sp/>objects<sp/>matches</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>setup()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>We<sp/>don&apos;t<sp/>need<sp/>to<sp/>set<sp/>anything<sp/>up<sp/>here</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>loop()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Read<sp/>data<sp/>from<sp/>scratch<sp/>characteristic<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ScratchData<sp/>thisScratch<sp/>=<sp/>Bean.readScratchData(1);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Compare<sp/>the<sp/>data<sp/>we<sp/>just<sp/>read<sp/>with<sp/>the<sp/>data<sp/>we<sp/>saw<sp/>last<sp/>time</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>matched<sp/>=<sp/>compareScratch(&amp;thisScratch,<sp/>&amp;lastScratch);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Save<sp/>the<sp/>data<sp/>we<sp/>just<sp/>read<sp/>for<sp/>our<sp/>next<sp/>comparison</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lastScratch<sp/>=<sp/>thisScratch;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!matched)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Set<sp/>the<sp/>LED<sp/>to<sp/>green<sp/>for<sp/>1<sp/>second<sp/>if<sp/>the<sp/>data<sp/>has<sp/>changed</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(0,<sp/>255,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.sleep(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Otherwise,<sp/>just<sp/>sleep<sp/>for<sp/>one<sp/>second<sp/>and<sp/>check<sp/>again</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.sleep(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="407" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1a4c835abe680607ce956af4f7fa965a20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long BeanClass::readScratchNumber</definition>
        <argsstring>(uint8_t bank)</argsstring>
        <name>readScratchNumber</name>
        <param>
          <type>uint8_t</type>
          <declname>bank</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read a 32-bit (four-byte) value from a scratch characteristic.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bank</parametername>
</parameternamelist>
<parameterdescription>
<para>The index of the source scratch char: <computeroutput>1</computeroutput>, <computeroutput>2</computeroutput>, <computeroutput>3</computeroutput>, <computeroutput>4</computeroutput>, or <computeroutput>5</computeroutput></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of the scratch characteristic</para></simplesect>
<heading level="1">Examples</heading>
</para><para>This example writes a value to and reads a value from a scratch characteristic:</para><para><programlisting><codeline><highlight class="normal">void<sp/>setup()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Serial<sp/>port<sp/>is<sp/>initialized<sp/>automatically;<sp/>we<sp/>don&apos;t<sp/>have<sp/>to<sp/>do<sp/>anything</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>loop()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Write<sp/>a<sp/>32-bit<sp/>number<sp/>to<sp/>scratch<sp/>characteristic<sp/>1</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Connect<sp/>to<sp/>Bean<sp/>with<sp/>LightBlue<sp/>to<sp/>view<sp/>the<sp/>hex<sp/>bytes</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.setScratchNumber(1,<sp/>millis());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Then<sp/>wait<sp/>a<sp/>bit</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.sleep(250);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Read<sp/>the<sp/>number<sp/>back<sp/>and<sp/>print<sp/>it<sp/>via<sp/>serial</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uint32_t<sp/>number<sp/>=<sp/>Bean.readScratchNumber(1);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.print(&quot;Number:<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.println(number);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Then<sp/>wait<sp/>a<sp/>bit<sp/>and<sp/>try<sp/>again</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.sleep(750);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="422" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Sleep</header>
      <description><para>Bean power management functions to help save battery life. </para></description>
      <memberdef kind="function" id="class_bean_class_1a15d6716d0bdc66a0345acc29d0c14a14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::sleep</definition>
        <argsstring>(uint32_t duration_ms)</argsstring>
        <name>sleep</name>
        <param>
          <type>uint32_t</type>
          <declname>duration_ms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sleep for a period of time.</para><para>This method puts the ATmega chip to sleep until it is woken by the LBM313 at the requested time.</para><para>Bean can be woken from sleep by the following:</para><para><itemizedlist>
<listitem><para>The requested sleep time elapses</para></listitem><listitem><para>A serial message is received from a connected client</para></listitem><listitem><para>A client connects to Bean while wake on connect is enabled</para></listitem><listitem><para>A pin change interrupt occurs</para></listitem></itemizedlist>
</para><para><computeroutput>Bean.sleep()</computeroutput> is more power-efficient than Arduino <computeroutput><ref refid="class_bean_class_1a15d6716d0bdc66a0345acc29d0c14a14" kindref="member">sleep()</ref></computeroutput> because it puts the ATmega into a low-power mode known as &quot;power-down&quot;. This disables the ATmega&apos;s internal timers, so functions like <computeroutput>millis()</computeroutput> will not track time elapsed during <computeroutput>Bean.sleep()</computeroutput>.</para><para>The ATmega can take up to 7 ms to wake from <computeroutput>Bean.sleep()</computeroutput>. If you are looking for more precise timings, please consider using <ulink url="https://www.arduino.cc/en/Reference/Delay">delay()</ulink> or <ulink url="https://www.arduino.cc/en/Reference/DelayMicroseconds">delayMicroseconds()</ulink>.</para><para>For more information on low-power mode on the ATmega328, check out this <ulink url="https://www.sparkfun.com/tutorials/309">Sparkfun tutorial</ulink>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>duration_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>The duration to sleep for, in milliseconds</para></parameterdescription>
</parameteritem>
</parameterlist>
<heading level="1">Examples</heading>
</para><para>This example turns on Bean&apos;s LED, sleeps for one second, turns off Bean&apos;s LED and sleeps for four more seconds, then repeats:</para><para><programlisting><codeline><highlight class="normal">void<sp/>setup()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>We<sp/>don&apos;t<sp/>need<sp/>to<sp/>set<sp/>anything<sp/>up<sp/>here</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>loop()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Check<sp/>if<sp/>LED<sp/>is<sp/>on</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(Bean.getLedGreen()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>LED<sp/>is<sp/>off.<sp/>Turn<sp/>LED<sp/>on<sp/>and<sp/>sleep<sp/>for<sp/>1<sp/>second</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(0,<sp/>255,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.sleep(1000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>LED<sp/>is<sp/>on.<sp/>Turn<sp/>LED<sp/>off<sp/>and<sp/>sleep<sp/>for<sp/>4<sp/>seconds</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(0,<sp/>255,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.sleep(4000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="458" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1abbd5ae43b98270dfc94b98b2ecd66281" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::keepAwake</definition>
        <argsstring>(bool enable)</argsstring>
        <name>keepAwake</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable or disable keep-awake mode.</para><para>By default, the Bean radio sleeps frequently to conserve power. Enabling keep-awake forces the LBM into wake mode and decreases latency between the LBM313 and the ATmega.</para><para>This may be useful if you are having trouble with latency between an event and a Bluetooth transmission: for example, to decrease the time between Bean reading a pin change event and sending a Bluetooth message.</para><para>Enabling keep-awake may signficantly decrease battery life. Use with caution.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>to enable keep-awake, false to disable</para></parameterdescription>
</parameteritem>
</parameterlist>
<heading level="1">Examples</heading>
</para><para>This example keeps the Bean awake to reduce latency between reading a pinstate and transmitting Bluetooth information:</para><para><programlisting><codeline><highlight class="normal">void<sp/>setup()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Keep<sp/>Bean<sp/>awake<sp/>to<sp/>reduce<sp/>latency<sp/>between<sp/>certain<sp/>events</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.keepAwake(true);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pinMode(0,<sp/>INPUT_PULLUP);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">void<sp/>loop()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Read<sp/>digital<sp/>pin<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!digitalRead(0))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>D0<sp/>is<sp/>LOW;<sp/>check<sp/>to<sp/>see<sp/>if<sp/>BLE<sp/>connected<sp/>to<sp/>any<sp/>devices</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>connectionState<sp/>=<sp/>Bean.getConnectionState();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.println(connectionState);<sp/><sp/>//<sp/>True<sp/>if<sp/>connected<sp/>to<sp/>a<sp/>device,<sp/>false<sp/>if<sp/>not</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.sleep(1000);<sp/><sp/>//<sp/>Sleep<sp/>for<sp/>1<sp/>second</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="477" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1a639e425394c820a99025d136dddd3369" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::enableWakeOnConnect</definition>
        <argsstring>(bool enable)</argsstring>
        <name>enableWakeOnConnect</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable or disable wake on connect. By default, Bean does not wake up when a BLE client connects.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>true to enable wake on connect, false to disable</para></parameterdescription>
</parameteritem>
</parameterlist>
<heading level="1">Examples</heading>
</para><para>This example wakes Bean when a client connects, waits for the client to disconnect, and sleeps on disconnect:</para><para><programlisting><codeline><highlight class="normal">void<sp/>setup()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Configure<sp/>Bean<sp/>to<sp/>wake<sp/>up<sp/>when<sp/>a<sp/>client<sp/>connects</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.enableWakeOnConnect(true);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Loop<sp/>runs<sp/>once<sp/>at<sp/>program<sp/>start.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>When<sp/>a<sp/>client<sp/>connects,<sp/>Bean<sp/>wakes<sp/>up<sp/>and<sp/>runs<sp/>loop<sp/>again.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Loop<sp/>continues<sp/>to<sp/>run<sp/>as<sp/>long<sp/>as<sp/>a<sp/>client<sp/>is<sp/>connected.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>loop()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Check<sp/>if<sp/>client<sp/>has<sp/>disconnected</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>connected<sp/>=<sp/>Bean.getConnectionState();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(connected)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Client<sp/>connected:<sp/>set<sp/>LED<sp/>to<sp/>green</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(0,<sp/>255,<sp/>0);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Client<sp/>disconnected:<sp/>turn<sp/>off<sp/>LED</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>This<sp/>sketch<sp/>runs<sp/>only<sp/>when<sp/>a<sp/>client<sp/>is<sp/>connected.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>This<sp/>might<sp/>be<sp/>useful<sp/>for<sp/>interactive<sp/>installations,<sp/>where<sp/>you<sp/>don&apos;t<sp/>want</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Bean<sp/>to<sp/>spend<sp/>any<sp/>power<sp/>unless<sp/>someone<sp/>is<sp/>actively<sp/>connected.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Sleep<sp/>for<sp/>a<sp/>long<sp/>time<sp/>to<sp/>conserve<sp/>power.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>0xFFFFFFFF<sp/>=<sp/>4,294,967,295<sp/>milliseconds<sp/>=<sp/>49<sp/>days</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.sleep(0xFFFFFFFF);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="490" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Advertising</header>
      <description><para>Set and verify the Bean BLE advertising configuration.</para><para>Bean makes itself visible to BLE Central devices by broadcasting BLE advertising packets. If advertising is disabled, Central devices will not be able to find or connect to Bean.</para><para>Advertising is automatically enabled when Bean is powered on or resets. However, uploading a sketch that disables advertising indefinitely may make it impossible to connect to Bean. If this happens to you, see <ulink url="#">this guide (TODO: ADD GUIDE + LINK)</ulink> to clear the sketch stored on Bean. </para></description>
      <memberdef kind="function" id="class_bean_class_1a32c0dc702c367caf274b72ba4a4cb8a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::setBeanName</definition>
        <argsstring>(const String &amp;s)</argsstring>
        <name>setBeanName</name>
        <param>
          <type>const String &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the advertising name of the Bean. BLE advertising names are truncated at 20 bytes.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>The name to be advertised</para></parameterdescription>
</parameteritem>
</parameterlist>
<heading level="1">Examples</heading>
</para><para>This example changes Bean&apos;s name based on its temperature:</para><para><programlisting><codeline><highlight class="normal">void<sp/>setup()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Disable<sp/>writing<sp/>to<sp/>NVRAM<sp/>to<sp/>preserve<sp/>its<sp/>lifespan,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>since<sp/>we<sp/>are<sp/>setting<sp/>a<sp/>new<sp/>Bean<sp/>name<sp/>every<sp/>15<sp/>seconds</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.enableConfigSave(false);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>loop()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Get<sp/>the<sp/>temperature</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>temperature<sp/>=<sp/>Bean.getTemperature();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Build<sp/>a<sp/>new<sp/>name<sp/>for<sp/>Bean<sp/>using<sp/>the<sp/>temperature</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>String<sp/>name<sp/>=<sp/>&quot;Temp<sp/>is<sp/>&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>name<sp/>+=<sp/>temperature;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>name<sp/>+=<sp/>&quot;<sp/>C&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Set<sp/>Bean&apos;s<sp/>new<sp/>name</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.setBeanName(name);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Sleep<sp/>for<sp/>15<sp/>seconds,<sp/>then<sp/>read<sp/>the<sp/>temperature<sp/>again</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.sleep(15000);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="515" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1a5b50d48ce0b6ccb3f267d1d7ba660dd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* BeanClass::getBeanName</definition>
        <argsstring>(void)</argsstring>
        <name>getBeanName</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read the currently-advertised name of the Bean.</para><para><simplesect kind="return"><para>The Bean name as a char array, null-terminated</para></simplesect>
<heading level="1">Examples</heading>
</para><para>This example prints Bean&apos;s name to Virtual Serial every two seconds:</para><para><programlisting><codeline><highlight class="normal">void<sp/>setup()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Set<sp/>up<sp/>serial<sp/>communication</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.begin(57600);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>loop()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Retrieve<sp/>the<sp/>name<sp/>of<sp/>this<sp/>Bean</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>char<sp/>*name<sp/>=<sp/>Bean.getBeanName();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>And<sp/>print<sp/>it</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.print(&quot;My<sp/>name<sp/>is<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.println(name);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Then<sp/>sleep<sp/>for<sp/>2<sp/>seconds</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.sleep(2000);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="528" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1a41412684c0f01f06f260fb1e724475d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::setAdvertisingInterval</definition>
        <argsstring>(uint16_t interval_ms)</argsstring>
        <name>setAdvertisingInterval</name>
        <param>
          <type>uint16_t</type>
          <declname>interval_ms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the Beans advertisement interval. This is useful if you are trying to optimize battery life at the exense of advertisement rates and can also be useful for increasing beacon advertisement rates. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>interval_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>length of advertisement interval in milliseconds. Minimum of BEAN_MIN_ADVERTISING_INT_MS and max of BEAN_MAX_ADVERTISING_INT_MS </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="535" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1a9bff2d903c4a543ba48f0ac1b392c7cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::enableAdvertising</definition>
        <argsstring>(bool enable, uint32_t timer)</argsstring>
        <name>enableAdvertising</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>timer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable or disable BLE advertising for a specific duration.</para><para>Advertising is automatically enabled when Bean is powered on or resets. Configuration changes made by calling this method are <bold>not</bold> stored in non-volatile memory.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>true to enable advertising, false to disable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timer</parametername>
</parameternamelist>
<parameterdescription>
<para>the duration to enable/disable advertising, in milliseconds</para></parameterdescription>
</parameteritem>
</parameterlist>
<heading level="1">Examples</heading>
</para><para>This example disables advertising for 10 seconds when digital pin 0 is pulled low:</para><para><programlisting><codeline><highlight class="normal">void<sp/>setup()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Configure<sp/>digital<sp/>pin<sp/>0<sp/>as<sp/>an<sp/>input<sp/>in<sp/>pullup<sp/>mode</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pinMode(0,<sp/>INPUT_PULLUP);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>loop()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Read<sp/>digital<sp/>pin<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(!digitalRead(0))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>D0<sp/>is<sp/>LOW;<sp/>disable<sp/>advertising<sp/>for<sp/>10<sp/>seconds</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.enableAdvertising(false,<sp/>10000);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.sleep(1000);<sp/><sp/>//<sp/>Sleep<sp/>for<sp/>1<sp/>second</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="551" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1ade5d4c6a061eeb6d7897ef4c3b2c26d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::enableAdvertising</definition>
        <argsstring>(bool enable)</argsstring>
        <name>enableAdvertising</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable or disable BLE advertising.</para><para>Advertising is automatically enabled when Bean is powered on or resets. Configuration changes made by calling this method are <bold>not</bold> stored in non-volatile memory.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>true to enable advertising, false to disable</para></parameterdescription>
</parameteritem>
</parameterlist>
<heading level="1">Examples</heading>
</para><para>This example disables advertising when digital pin 0 is pulled low and enables it otherwise:</para><para><programlisting><codeline><highlight class="normal">void<sp/>setup()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Configure<sp/>digital<sp/>pin<sp/>0<sp/>as<sp/>an<sp/>input<sp/>in<sp/>pullup<sp/>mode</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pinMode(0,<sp/>INPUT_PULLUP);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>loop()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Read<sp/>digital<sp/>pin<sp/>0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(digitalRead(0))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>D0<sp/>is<sp/>HIGH;<sp/>enable<sp/>advertising</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.enableAdvertising(true);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>D0<sp/>is<sp/>LOW;<sp/>disable<sp/>advertising</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.enableAdvertising(false);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.sleep(1000);<sp/><sp/>//<sp/>Sleep<sp/>for<sp/>1<sp/>second</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="566" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1a099bbffcf98e71f533f8277ec5274785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BeanClass::getAdvertisingState</definition>
        <argsstring>(void)</argsstring>
        <name>getAdvertisingState</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check whether the Bean is currently advertising.</para><para><simplesect kind="return"><para>true if Bean is advertising, false if Bean is not advertising</para></simplesect>
<heading level="1">Examples</heading>
</para><para>This example toggles Bean&apos;s advertising every 15 seconds and indicates the current advertising status with the LED:</para><para><programlisting><codeline><highlight class="normal">void<sp/>setup()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>We<sp/>don&apos;t<sp/>need<sp/>to<sp/>set<sp/>anything<sp/>up<sp/>here</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>loop()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>bool<sp/>advertising<sp/>=<sp/>Bean.getAdvertisingState();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(advertising)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Bean<sp/>is<sp/>currently<sp/>advertising.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Disable<sp/>advertising<sp/>and<sp/>set<sp/>the<sp/>LED<sp/>to<sp/>red.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(255,<sp/>0,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Bean<sp/>is<sp/>not<sp/>advertising.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Enable<sp/>advertising<sp/>and<sp/>set<sp/>the<sp/>LED<sp/>to<sp/>green.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(0,<sp/>255,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.sleep(15000);<sp/><sp/>//<sp/>Sleep<sp/>for<sp/>15<sp/>seconds</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="580" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1a9bbcf8d6db2a229d12838b2626e514d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::enableCustom</definition>
        <argsstring>(void)</argsstring>
        <name>enableCustom</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enables custom advertisement. The Bean will enter a rotating advertisement mode where it will advertise as a bean for a few moments then advertise whatever is in the custom advertisement packet and back again </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="585" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1a02201abea93983434dec1025c4957e83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::disableCustom</definition>
        <argsstring>(void)</argsstring>
        <name>disableCustom</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disables custom advertisement. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="590" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1add3cfcf31fe80a72bf6e4cf2cdaf99bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::setCustomAdvertisement</definition>
        <argsstring>(uint8_t *buf, int len)</argsstring>
        <name>setCustomAdvertisement</name>
        <param>
          <type>uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the custom advertisement packet. The max length is 31 bytes. The first 3 bytes specify the advertisement mode. They take the form 0x2, GAP_ADTYPE_FLAGS, any sum of advertisement types (as defined by AdvertisementType) All following data are up to the user to define and follow the pattern of [length, AdvertisementDataTypes, data1, data2, ...] where length includes the number of data plus 1 (for the AdvertisementDataTypes) The data can be chained together into the single buffer up to the maxiumum length. For example: [0x02, GAP_ADTYPE_FLAGS, GAP_ADTYPE_FLAGS_BREDR_NOT_SUPPORTED + GAP_ADTYPE_FLAGS_GENERAL, 0x02, GAP_ADTYPE_MANUFACTURER_SPECIFIC, 42, 0x02, GAP_ADTYPE_POWER_LEVEL, 10, ...]</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>a buffer full of data to advertise </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>the length of the buffer</para></parameterdescription>
</parameteritem>
</parameterlist>
<heading level="1">Examples</heading>
</para><para>This sketch (advertiser.ino) will enable a custom advertisement for the Bean. It will broadcast the following packet:</para><para><computeroutput>{0x02, GAP_ADTYPE_FLAGS (0x01), GAP_ADTYPE_FLAGS_GENERAL | GAP_ADTYPE_FLAGS_BREDR_NOT_SUPPORTED (0x06), 0x03, GAP_ADTYPE_MANUFACTURER_SPECIFIC (0xFF), 0xAC, 0x0n}</computeroutput></para><para>When pin 0 is pulled to ground, Bean will toggle the green LED. It will also set the last byte in the advertisement packet to reflect the LED&apos;s on state. When used in conjunction with observer.ino, the observer Bean will see this packet and will turn its light on.</para><para><programlisting><codeline><highlight class="normal">//<sp/>debounce<sp/>code</highlight></codeline>
<codeline><highlight class="normal">int<sp/>buttonState;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>the<sp/>current<sp/>input</highlight></codeline>
<codeline><highlight class="normal">int<sp/>lastButtonState<sp/>=<sp/>LOW;<sp/><sp/>//<sp/>the<sp/>previous<sp/>read<sp/>input</highlight></codeline>
<codeline><highlight class="normal">long<sp/>lastDebounceTime<sp/>=<sp/>0;<sp/><sp/>//<sp/>the<sp/>last<sp/>time<sp/>we<sp/>flipped<sp/>the<sp/>output<sp/>pin</highlight></codeline>
<codeline><highlight class="normal">long<sp/>debounceDelay<sp/>=<sp/>50;<sp/><sp/><sp/><sp/>//<sp/>how<sp/>long<sp/>to<sp/>debounce<sp/>for</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">static<sp/>uint8_t<sp/>customAdvertData[]<sp/>=<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>general<sp/>discoverable<sp/>mode<sp/>advertises<sp/>indefinitely</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0x02,<sp/><sp/>//<sp/>length<sp/>of<sp/>this<sp/>data</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>GAP_ADTYPE_FLAGS,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>GAP_ADTYPE_FLAGS_GENERAL<sp/>|<sp/>GAP_ADTYPE_FLAGS_BREDR_NOT_SUPPORTED,</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>two-byte<sp/>broadcast</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0x03,<sp/><sp/>//<sp/>length<sp/>of<sp/>this<sp/>data<sp/>including<sp/>the<sp/>data<sp/>type<sp/>byte</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>GAP_ADTYPE_MANUFACTURER_SPECIFIC,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0xAC,<sp/><sp/>//<sp/>arbitrary<sp/>data<sp/>so<sp/>we<sp/>can<sp/>make<sp/>sure<sp/>this<sp/>is</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>the<sp/>Bean<sp/>we&apos;re<sp/>looking<sp/>for</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>0x00};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">bool<sp/>enabled<sp/>=<sp/>true;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>setup()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.setCustomAdvertisement(customAdvertData,<sp/>sizeof(customAdvertData));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.enableCustom();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.enableConfigSave(false);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.setAdvertisingInterval(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>pinMode(0,<sp/>INPUT_PULLUP);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>loop()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Read<sp/>the<sp/>state<sp/>of<sp/>pin<sp/>0<sp/>and<sp/>debounce<sp/>in<sp/>software</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>reading<sp/>=<sp/>digitalRead(0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(reading<sp/>!=<sp/>lastButtonState)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>lastDebounceTime<sp/>=<sp/>millis();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>((millis()<sp/>-<sp/>lastDebounceTime)<sp/>&gt;<sp/>debounceDelay)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(reading<sp/>!=<sp/>buttonState)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buttonState<sp/>=<sp/>reading;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(buttonState<sp/>==<sp/>LOW)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Pin<sp/>0<sp/>was<sp/>pulled<sp/>to<sp/>ground<sp/>(button<sp/>was<sp/>pressed)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>enabled<sp/>=<sp/>!enabled;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bean.setLedGreen(enabled<sp/>?<sp/>0<sp/>:<sp/>255);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>customAdvertData[6]<sp/>=<sp/>enabled<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Bean.setCustomAdvertisement(customAdvertData,<sp/>sizeof(customAdvertData));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>lastButtonState<sp/>=<sp/>reading;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="614" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>iBeacon</header>
      <description><para>Let your Bean act as an <ulink url="https://developer.apple.com/ibeacon/">iBeacon</ulink>, a way to convey real-world location to iOS devices.</para><para>Bean supports a limited subset of UUIDs available to iBeacon devices. A Bean iBeacon UUID is made up of 16 user-configurable bits and 112 preconfigured bits, where <computeroutput>xx</computeroutput> represents a user-configurable byte:</para><para><computeroutput>A495xxxx-C5B1-4B44-B512-1370F02D74DE</computeroutput></para><para>Major and minor IDs are used to identify the iBeacon with greater accuracy than with the UUID alone, and are both unsigned integers between 0 and 66535</para><para>Using iBeacon features will, by default, write to Bean&apos;s NVRAM. The NVRAM has a limited number of writes. Use <computeroutput>enableConfigSave</computeroutput> to store settings temporarily and conserve NVRAM writes. </para></description>
      <memberdef kind="function" id="class_bean_class_1a31d4e4fa7d66ddf1988e456ecbf9dc58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::enableiBeacon</definition>
        <argsstring>(void)</argsstring>
        <name>enableiBeacon</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Works very similarly to setBeaconEnable. The primary difference being that enableiBeacon adds the beacon advertisement to a rotating adverisement instead of overrwriting the current standard Bean advertisement. Parameters are still set with the setBeaconParameters function. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="635" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1a3b78a7b755cda9f066104f339638d69c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::setBeaconParameters</definition>
        <argsstring>(uint16_t uuid, uint16_t major_id, uint16_t minor_id)</argsstring>
        <name>setBeaconParameters</name>
        <param>
          <type>uint16_t</type>
          <declname>uuid</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>major_id</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>minor_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Configure Bean&apos;s iBeacon UUID, major ID, and minor ID. Each of these parameters, <bold>including UUID</bold>, takes 16-bit unsigned values. For more information on UUID, major, and minor values, see <ulink url="https://support.kontakt.io/hc/en-gb/articles/201620741-iBeacon-Parameters-UUID-Major-and-Minor">this iBeacon FAQ</ulink>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uuid</parametername>
</parameternamelist>
<parameterdescription>
<para>The 16-bit value used to set part of the iBeacon UUID. For example: Passing <computeroutput>0xABCD</computeroutput> to <computeroutput>uuid</computeroutput> will set the Bean&apos;s UUID to <computeroutput>A495ABCD-C5B1-4B44-B512-1370F02D74DE</computeroutput>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>major_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The major ID of the iBeacon </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>major_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The minor ID of the iBeacon</para></parameterdescription>
</parameteritem>
</parameterlist>
<heading level="1">Examples</heading>
</para><para>This example configures iBeacon and uses the Bean only to advertise and transmit iBeacon data:</para><para><programlisting><codeline><highlight class="normal">void<sp/>setup()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>/*<sp/>Configure<sp/>beacon<sp/>with:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/><sp/>----------------------</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/><sp/>UUID:<sp/>A495-BEEF-C5B1-4B44-B512-1370F02D74DE</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/><sp/>Major<sp/>ID:<sp/>0<sp/>(Any<sp/>unsigned<sp/>int<sp/>0-66535)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*<sp/><sp/>Minor<sp/>ID:<sp/>65535<sp/>(Any<sp/>unsigned<sp/>int<sp/>0-66535)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>*/</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.setBeaconParameters(0xBEEF,<sp/>0,<sp/>999);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Enable<sp/>iBeacon</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.setBeaconEnable(true);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">void<sp/>loop()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Blink<sp/>LED<sp/>to<sp/>verify<sp/>the<sp/>sketch<sp/>is<sp/>working</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.setLed(0,<sp/>0,<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.sleep(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.setLed(0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.sleep(5000);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="650" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1a354e2ff36d0e101b35255bae0a5e33ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::setBeaconEnable</definition>
        <argsstring>(bool beaconEnable)</argsstring>
        <name>setBeaconEnable</name>
        <param>
          <type>bool</type>
          <declname>beaconEnable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable or disable iBeacon functionality.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>beaconEnable</parametername>
</parameternamelist>
<parameterdescription>
<para>true to enable iBeacon, false to disable </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="657" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Battery</header>
      <description><para>Read the Bean&apos;s battery level. </para></description>
      <memberdef kind="function" id="class_bean_class_1ac21fd79279f5e25c37609ff15e53cea1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t BeanClass::getBatteryLevel</definition>
        <argsstring>(void)</argsstring>
        <name>getBatteryLevel</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current battery level, in percent.</para><para><simplesect kind="return"><para>a value in the range 0 to 100: 0 = 1.95 V, 100 = 3.53 V </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="672" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1a862784d57eca8dd368172612e5e792de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t BeanClass::getBatteryVoltage</definition>
        <argsstring>(void)</argsstring>
        <name>getBatteryVoltage</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current battery voltage, in volts.</para><para>Accuracy is ±0.01 V.</para><para><simplesect kind="return"><para>a value in the range 195 to 353: 195 = 1.95 V, 353 = 3.53 V</para></simplesect>
<heading level="1">Examples</heading>
</para><para>This example will display a Bean&apos;s respective current battery level and voltage every 5 seconds:</para><para><programlisting><codeline><highlight class="normal">void<sp/>setup()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Serial<sp/>port<sp/>is<sp/>initialized<sp/>automatically;<sp/>we<sp/>don&apos;t<sp/>have<sp/>to<sp/>do<sp/>anything</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">void<sp/>loop()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>batteryPercentage<sp/>=<sp/>Bean.getBatteryLevel();<sp/><sp/>//<sp/>Between<sp/>0<sp/>and<sp/>100</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>batteryVoltage<sp/>=<sp/>Bean.getBatteryVoltage();<sp/><sp/><sp/>//<sp/>Between<sp/>191<sp/>and<sp/>353<sp/>(1.91V-3.53V)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.print(&quot;The<sp/>remaining<sp/>battery<sp/>life<sp/>is:<sp/>%&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.println(batteryPercentage);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>blinkLedBasedOnBatteryLevel(batteryPercentage);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.print(&quot;The<sp/>current<sp/>battery<sp/>voltage<sp/>is:<sp/>&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.print(batteryVoltage<sp/>/<sp/>100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Serial.println(&quot;V&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.sleep(5000);<sp/><sp/>//<sp/>Sleep<sp/>for<sp/>5<sp/>seconds<sp/>before<sp/>repeating</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">void<sp/>blinkLedBasedOnBatteryLevel(int<sp/>batteryPercentage)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(batteryPercentage<sp/>&gt;<sp/>80)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(0,<sp/>255,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>if<sp/>(batteryPercentage<sp/>&gt;<sp/>60)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(255,<sp/>255,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>if<sp/>(batteryPercentage<sp/>&gt;<sp/>40)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(255,<sp/>150,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>if<sp/>(batteryPercentage<sp/>&gt;<sp/>20)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(255,<sp/>75,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(255,<sp/>0,<sp/>15);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.sleep(100);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.setLed(0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="687" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Temperature</header>
      <description><para>Read the ambient temperature of the Bean. </para></description>
      <memberdef kind="function" id="class_bean_class_1a711e837c145b51a8e95aa22a3fc9bcf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int8_t</type>
        <definition>int8_t BeanClass::getTemperature</definition>
        <argsstring>(void)</argsstring>
        <name>getTemperature</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current temperature of the Bean, in degrees Celsius. The Bean uses the BMA250 (<ulink url="http://ae-bst.resource.bosch.com/media/products/dokumente/bma250/bst-bma250-ds002-05.pdf">datasheet</ulink>) for temperature readings.</para><para><simplesect kind="return"><para>temperature, between -40 and 88 degrees Celsius</para></simplesect>
<heading level="1">Examples</heading>
</para><para>This example changes the color of the LED based on the temperature reading of the Bean:</para><para><programlisting><codeline><highlight class="normal">void<sp/>setup()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Serial<sp/>port<sp/>is<sp/>initialized<sp/>automatically;<sp/>we<sp/>don&apos;t<sp/>have<sp/>to<sp/>do<sp/>anything</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">void<sp/>loop()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Get<sp/>temperature<sp/>reading</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>temperature<sp/>=<sp/>Bean.getTemperature();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Set<sp/>LED<sp/>color<sp/>based<sp/>on<sp/>temperature<sp/>of<sp/>the<sp/>Bean</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(temperature<sp/>&gt;<sp/>80)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(255,<sp/>0,<sp/>0);<sp/><sp/>//<sp/>Set<sp/>LED<sp/>red</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>if<sp/>(temperature<sp/>&gt;<sp/>60)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(255,<sp/>150,<sp/>0);<sp/><sp/>//<sp/>Set<sp/>LED<sp/>orange</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>if<sp/>(temperature<sp/>&gt;<sp/>40)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(255,<sp/>255,<sp/>0);<sp/><sp/>//<sp/>Set<sp/>LED<sp/>yellow</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>if<sp/>(temperature<sp/>&gt;<sp/>20)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(0,<sp/>255,<sp/>0);<sp/><sp/>//<sp/>Set<sp/>LED<sp/>green</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(0,<sp/>0,<sp/>255);<sp/><sp/>//<sp/>Set<sp/>LED<sp/>blue</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.sleep(5000);<sp/><sp/>//<sp/>Sleep<sp/>for<sp/>5<sp/>seconds<sp/>before<sp/>rechecking<sp/>temperature</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="708" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Connection</header>
      <description><para>Work with active BLE Central devices that connect to Bean. </para></description>
      <memberdef kind="function" id="class_bean_class_1a1509dbbc3ddbd08725e2cb65a9289e90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::disconnect</definition>
        <argsstring>(void)</argsstring>
        <name>disconnect</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Terminate the connection between Bean and the connected BLE Central device. If no Central device is connected, this method does nothing. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="722" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1ab426b11e8bee60de92707254c0501c20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BeanClass::getConnectionState</definition>
        <argsstring>(void)</argsstring>
        <name>getConnectionState</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if any BLE Central devices are currently connected to Bean.</para><para><simplesect kind="return"><para>true if a device is connected, false otherwise</para></simplesect>
<heading level="1">Examples</heading>
</para><para>This example blinks the LED on the Bean green if connected, red if disconnected:</para><para><programlisting><codeline><highlight class="normal">void<sp/>setup()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Nothing<sp/>to<sp/>initialize<sp/>up<sp/>here</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">void<sp/>loop()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>If<sp/>Bean<sp/>is<sp/>connected<sp/>to<sp/>a<sp/>device,<sp/>blink<sp/>green<sp/>LED</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(Bean.getConnectionState()<sp/>==<sp/>true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(0,<sp/>255,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.sleep(250);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>If<sp/>Bean<sp/>is<sp/>not<sp/>connected,<sp/>blink<sp/>red<sp/>LED</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}<sp/>else<sp/>if<sp/>(Bean.getConnectionState()<sp/>==<sp/>false)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(255,<sp/>0,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.sleep(250);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Bean.setLed(0,<sp/>0,<sp/>0);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Sleep<sp/>for<sp/>2<sp/>seconds</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.sleep(2000);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="735" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Bluetooth Services</header>
      <description><para>Functions dealing with Bluetooth service configurations and pairing. </para></description>
      <memberdef kind="function" id="class_bean_class_1ae2547ba8f4b67a9ac774ce6d89b14dcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BluetoothServices</type>
        <definition>BluetoothServices BeanClass::getServices</definition>
        <argsstring>(void)</argsstring>
        <name>getServices</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a struct of all of the currently services and whether or not they are enabled. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="748" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1a17b6e95f7b93e39ae83971ed796edd5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::setServices</definition>
        <argsstring>(BluetoothServices services)</argsstring>
        <name>setServices</name>
        <param>
          <type>BluetoothServices</type>
          <declname>services</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets services for the Bean to use (NOTE: disabling the standard service will no longer allow the Bean to connect to the Bean Loader)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>services</parametername>
</parameternamelist>
<parameterdescription>
<para>the services to change </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="755" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1a98a040220137d9dd047250e247bd4ebd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::resetServices</definition>
        <argsstring>(void)</argsstring>
        <name>resetServices</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resets services leaving only the primary standard Bean service advertising. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="760" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1a11cb6a1ec42d1af44af840dff1875d00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::setPairingPin</definition>
        <argsstring>(uint32_t pin)</argsstring>
        <name>setPairingPin</name>
        <param>
          <type>uint32_t</type>
          <declname>pin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the pairing PIN for a secure PIN-based connection. The default PIN is 000000.</para><para>Calling this function enables the pairing PIN mode. Disable it with <computeroutput>enablePairingPin(false)</computeroutput>.</para><para>If you wish to use this with HID or ANCS, set the PIN after enabling either of the profiles.</para><para>After pairing, your device and Bean will be bonded. In order to un-bond, you will have to manually disconnect from Bean in your device&apos;s settings.</para><para>The PIN will be saved to nonvolatile memory unless <computeroutput>enableConfigSave(false)</computeroutput> is called.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin</parametername>
</parameternamelist>
<parameterdescription>
<para>the pairing PIN to set, from 000000 to 999999</para></parameterdescription>
</parameteritem>
</parameterlist>
<heading level="1">Examples</heading>
</para><para>This example sets a pairing PIN of 123456 for future connections:</para><para><programlisting><codeline><highlight class="normal">void<sp/>setup()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Enable<sp/>6-digit<sp/>pairing<sp/>PIN<sp/>code<sp/>(default<sp/>is<sp/>000000)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.enablePairingPin(true);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Set<sp/>pairing<sp/>PIN<sp/>to<sp/>123456</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.setPairingPin(123456);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Pairing<sp/>PIN<sp/>will<sp/>be<sp/>required<sp/>when<sp/>future<sp/>connections<sp/>are<sp/>established</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">void<sp/>loop()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Sleep<sp/>forever</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.sleep(0xffffffff);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="781" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1afff90ba1cdb690b88c1b8b4917e71b32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::enablePairingPin</definition>
        <argsstring>(bool enable)</argsstring>
        <name>enablePairingPin</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enables or disables pairing PIN functionality.</para><para>The default PIN is 000000. This can be changed using <computeroutput>setPairingPin</computeroutput>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>to enable, false to disable </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="790" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Other</header>
      <description><para>Functions that don&apos;t belong in any of the other categories. </para></description>
      <memberdef kind="function" id="class_bean_class_1a2ae5aa1b912ca67715670f1dea865431" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::enableConfigSave</definition>
        <argsstring>(bool enableSave)</argsstring>
        <name>enableConfigSave</name>
        <param>
          <type>bool</type>
          <declname>enableSave</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allows temporary storage of BLE configuration settings, as opposed to permanent storage in non-volatile memory (NVRAM).</para><para>Bean can only write to NVRAM a maximum of 20,000 times. If your sketch changes its advertising configuration frequently, it will quickly use up all of your Bean NVRAM&apos;s writes. To prevent this, disable saving to NVRAM first.</para><para>Configurations written while NVRAM saving is disabled will persist until the Bean is power cycled.</para><para>When the Bean is power cycled, saving to NVRAM is re-enabled.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enableSave</parametername>
</parameternamelist>
<parameterdescription>
<para>true to disable saving to NVRAM, false to enable</para></parameterdescription>
</parameteritem>
</parameterlist>
<heading level="1">Examples</heading>
</para><para>This example enables settings that will only be used temporarily because enableConfigSave is used:</para><para><programlisting><codeline><highlight class="normal">void<sp/>setup()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Set<sp/>enableConfigSave<sp/>to<sp/>true<sp/>to<sp/>save<sp/>settings<sp/>temporarily</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.enableConfigSave(false);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Enable<sp/>some<sp/>settings<sp/>which<sp/>will<sp/>be<sp/>temporary<sp/>now</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.enableAdvertising(true);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.enableCustom();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Bean.enableiBeacon();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>These<sp/>settings<sp/>will<sp/>be<sp/>reset<sp/>to<sp/>default<sp/>upon<sp/>rebooting<sp/>the<sp/>Bean</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">void<sp/>loop()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Do<sp/>anything<sp/>here<sp/>with<sp/>new<sp/>temporary<sp/>settings</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="817" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1a8823b48c41914a1a32d6dd3974ebf57d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::restartBluetooth</definition>
        <argsstring>(void)</argsstring>
        <name>restartBluetooth</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs a hard reset on the bluetooth module.</para><para>WARNING: Advanced function. The misuse of this method can cause the Bean to repeatedly reboot, causing it to be unconnectable. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="826" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_bean_class_1a235666c4a2138d1178f11edb1504fa7a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>BeanClass::BeanClass</definition>
        <argsstring>()</argsstring>
        <name>BeanClass</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="831" column="1" bodyfile="hardware/bean/avr/cores/bean/Bean.h" bodystart="831" bodyend="831"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_bean_class_1a10616ad423d48bafbcc72164b0df525d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BeanClass::attemptSleep</definition>
        <argsstring>(uint32_t duration_ms)</argsstring>
        <name>attemptSleep</name>
        <param>
          <type>uint32_t</type>
          <declname>duration_ms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Send a message from the ATmega to the CC2540 asking it to wake up the ATmega at a given time. The CC2540 might not receive the message, so it&apos;s important to check the return value of this method.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>duration_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>The duration to sleep for, in milliseconds</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the message was acknowledged by the CC2540 successfully, false if the message was not acknowledged and should be sent again </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="841" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1abfcf60b2b2065b6fe3c9ae639d1d0fd8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int16_t</type>
        <definition>int16_t BeanClass::convertAcceleration</definition>
        <argsstring>(uint8_t high_byte, uint8_t low_byte)</argsstring>
        <name>convertAcceleration</name>
        <param>
          <type>uint8_t</type>
          <declname>high_byte</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>low_byte</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Needs docs </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="846" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1a118526842dd8cbf820ba34e83d706033" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::accelerometerConfig</definition>
        <argsstring>(uint16_t interrupts, uint8_t power_mode)</argsstring>
        <name>accelerometerConfig</name>
        <param>
          <type>uint16_t</type>
          <declname>interrupts</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>power_mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set interrupts and power mode of the accelerometer</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>interrupts</parametername>
</parameternamelist>
<parameterdescription>
<para>number of accelerometer interrupts </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>power_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>power mode of the accelerometer</para></parameterdescription>
</parameteritem>
</parameterlist>
Power modes: Normal mode: 0x00 (~140uA) Suspend mode: 0x80 (~0.5uA) Low Power 10ms: 0x54 (~16.4uA) Low Power 100ms: 0x5A (~2.3uA) Low Power 1s: 0x5E (~0.7uA) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="860" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1a6fc48e30999657b04b27908fc4f1bf24" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanClass::enableWakeOnAccelerometer</definition>
        <argsstring>(uint8_t sources)</argsstring>
        <name>enableWakeOnAccelerometer</name>
        <param>
          <type>uint8_t</type>
          <declname>sources</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enables Bean to awaken when acceleration is detected</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sources</parametername>
</parameternamelist>
<parameterdescription>
<para>set wake interrupt; awake until latch time expires (default 250 ms)</para></parameterdescription>
</parameteritem>
</parameterlist>
Wake modes: Wake for any event 0xF7 Wake when flat 0x80 Wake when oriented 0x40 Wake on single tap 0x20 Wake on double-tap 0x10 Wake on any motion 0x04 Wake on high g-force 0x02 Wake on low g-force 0x01 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="876" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_class_1aaa0bac4371fd7f49671f06f6373242be" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t BeanClass::checkAccelInterrupts</definition>
        <argsstring>()</argsstring>
        <name>checkAccelInterrupts</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the accelerometer interrupts</para><para><simplesect kind="return"><para>the accelerometer interrupts </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/Bean.h" line="883" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="hardware/bean/avr/cores/bean/Bean.h" line="98" column="1" bodyfile="hardware/bean/avr/cores/bean/Bean.h" bodystart="98" bodyend="884"/>
    <listofallmembers>
      <member refid="class_bean_class_1a118526842dd8cbf820ba34e83d706033" prot="private" virt="non-virtual"><scope>BeanClass</scope><name>accelerometerConfig</name></member>
      <member refid="class_bean_class_1a3e743eb8cc8e5e04364f53801b8fe83e" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>accelRegisterRead</name></member>
      <member refid="class_bean_class_1a47244506c985ef7aead3695811002ad2" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>accelRegisterWrite</name></member>
      <member refid="class_bean_class_1a10616ad423d48bafbcc72164b0df525d" prot="private" virt="non-virtual"><scope>BeanClass</scope><name>attemptSleep</name></member>
      <member refid="class_bean_class_1a235666c4a2138d1178f11edb1504fa7a" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>BeanClass</name></member>
      <member refid="class_bean_class_1aaa0bac4371fd7f49671f06f6373242be" prot="private" virt="non-virtual"><scope>BeanClass</scope><name>checkAccelInterrupts</name></member>
      <member refid="class_bean_class_1a75492018fa92ad32c06a12ce456dc74c" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>checkMotionEvent</name></member>
      <member refid="class_bean_class_1abfcf60b2b2065b6fe3c9ae639d1d0fd8" prot="private" virt="non-virtual"><scope>BeanClass</scope><name>convertAcceleration</name></member>
      <member refid="class_bean_class_1a02201abea93983434dec1025c4957e83" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>disableCustom</name></member>
      <member refid="class_bean_class_1a0f9fb65a465070f9f3e9cdf4f2687bdc" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>disableMotionEvents</name></member>
      <member refid="class_bean_class_1a1509dbbc3ddbd08725e2cb65a9289e90" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>disconnect</name></member>
      <member refid="class_bean_class_1a9bff2d903c4a543ba48f0ac1b392c7cc" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>enableAdvertising</name></member>
      <member refid="class_bean_class_1ade5d4c6a061eeb6d7897ef4c3b2c26d3" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>enableAdvertising</name></member>
      <member refid="class_bean_class_1a2ae5aa1b912ca67715670f1dea865431" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>enableConfigSave</name></member>
      <member refid="class_bean_class_1a9bbcf8d6db2a229d12838b2626e514d0" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>enableCustom</name></member>
      <member refid="class_bean_class_1a31d4e4fa7d66ddf1988e456ecbf9dc58" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>enableiBeacon</name></member>
      <member refid="class_bean_class_1a9d2f98bbb1b8a715c0fe549c438f44ed" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>enableMotionEvent</name></member>
      <member refid="class_bean_class_1afff90ba1cdb690b88c1b8b4917e71b32" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>enablePairingPin</name></member>
      <member refid="class_bean_class_1a6fc48e30999657b04b27908fc4f1bf24" prot="private" virt="non-virtual"><scope>BeanClass</scope><name>enableWakeOnAccelerometer</name></member>
      <member refid="class_bean_class_1a639e425394c820a99025d136dddd3369" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>enableWakeOnConnect</name></member>
      <member refid="class_bean_class_1a53f2174dd2f3c2907acc3355cef64842" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>getAcceleration</name></member>
      <member refid="class_bean_class_1ad08dec6f240de8a53f110ddf066f6ab2" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>getAccelerationRange</name></member>
      <member refid="class_bean_class_1a00cf73de73eeb00d220efa32a830d6ef" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>getAccelerationX</name></member>
      <member refid="class_bean_class_1aba0554ca18558748b67205bd5bdcaeac" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>getAccelerationY</name></member>
      <member refid="class_bean_class_1a5c977e7b185ebc038335228d8ef1d0b9" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>getAccelerationZ</name></member>
      <member refid="class_bean_class_1afb4f9a75f687547ff8f6cb4146ab30fa" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>getAccelerometerPowerMode</name></member>
      <member refid="class_bean_class_1a099bbffcf98e71f533f8277ec5274785" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>getAdvertisingState</name></member>
      <member refid="class_bean_class_1ac21fd79279f5e25c37609ff15e53cea1" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>getBatteryLevel</name></member>
      <member refid="class_bean_class_1a862784d57eca8dd368172612e5e792de" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>getBatteryVoltage</name></member>
      <member refid="class_bean_class_1a5b50d48ce0b6ccb3f267d1d7ba660dd3" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>getBeanName</name></member>
      <member refid="class_bean_class_1ab426b11e8bee60de92707254c0501c20" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>getConnectionState</name></member>
      <member refid="class_bean_class_1ab73794fbf27d0297ead453ca60ac4aaf" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>getLed</name></member>
      <member refid="class_bean_class_1a8dcd68a87dc75dd0fe912483cc05fa43" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>getLedBlue</name></member>
      <member refid="class_bean_class_1a5619292a562731e94f97e93432ab3639" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>getLedGreen</name></member>
      <member refid="class_bean_class_1aea8736bf91c03de609233ddb270fb77d" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>getLedRed</name></member>
      <member refid="class_bean_class_1a5aa91cc9c0a3e17da864978845735ded" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>getObserverMessage</name></member>
      <member refid="class_bean_class_1ae2547ba8f4b67a9ac774ce6d89b14dcb" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>getServices</name></member>
      <member refid="class_bean_class_1a711e837c145b51a8e95aa22a3fc9bcf9" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>getTemperature</name></member>
      <member refid="class_bean_class_1abbd5ae43b98270dfc94b98b2ecd66281" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>keepAwake</name></member>
      <member refid="class_bean_class_1af5b9029cc816e5ce21263be975aa6050" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>readScratchData</name></member>
      <member refid="class_bean_class_1a4c835abe680607ce956af4f7fa965a20" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>readScratchNumber</name></member>
      <member refid="class_bean_class_1a98a040220137d9dd047250e247bd4ebd" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>resetServices</name></member>
      <member refid="class_bean_class_1a8823b48c41914a1a32d6dd3974ebf57d" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>restartBluetooth</name></member>
      <member refid="class_bean_class_1acb8e9a741e2538393256f95d27c4571d" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>setAccelerationRange</name></member>
      <member refid="class_bean_class_1a4eebb09ead4b598ef56c359ed14141be" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>setAccelerometerPowerMode</name></member>
      <member refid="class_bean_class_1a41412684c0f01f06f260fb1e724475d9" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>setAdvertisingInterval</name></member>
      <member refid="class_bean_class_1a354e2ff36d0e101b35255bae0a5e33ca" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>setBeaconEnable</name></member>
      <member refid="class_bean_class_1a3b78a7b755cda9f066104f339638d69c" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>setBeaconParameters</name></member>
      <member refid="class_bean_class_1a32c0dc702c367caf274b72ba4a4cb8a2" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>setBeanName</name></member>
      <member refid="class_bean_class_1add3cfcf31fe80a72bf6e4cf2cdaf99bb" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>setCustomAdvertisement</name></member>
      <member refid="class_bean_class_1a7af1f9d1edb112f761db9b69686b5a5a" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>setLed</name></member>
      <member refid="class_bean_class_1ac09c0f3cea6025e2e12e8b6c5419434b" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>setLedBlue</name></member>
      <member refid="class_bean_class_1ae1955c0312d1fa90bfeb847dada48c8c" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>setLedGreen</name></member>
      <member refid="class_bean_class_1adfc2642320c53819c83bbaa59bbcef9b" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>setLedRed</name></member>
      <member refid="class_bean_class_1a11cb6a1ec42d1af44af840dff1875d00" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>setPairingPin</name></member>
      <member refid="class_bean_class_1a6a8c9b33ada6cc7da1d9229dd0d7849e" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>setScratchData</name></member>
      <member refid="class_bean_class_1a74e7107c64bec91d676cdd534ac6bb4d" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>setScratchNumber</name></member>
      <member refid="class_bean_class_1a17b6e95f7b93e39ae83971ed796edd5b" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>setServices</name></member>
      <member refid="class_bean_class_1a15d6716d0bdc66a0345acc29d0c14a14" prot="public" virt="non-virtual"><scope>BeanClass</scope><name>sleep</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
