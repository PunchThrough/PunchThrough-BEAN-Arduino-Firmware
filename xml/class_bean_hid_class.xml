<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="class_bean_hid_class" kind="class" language="C++" prot="public">
    <compoundname>BeanHidClass</compoundname>
      <sectiondef kind="user-defined">
      <header>HID</header>
      <description><para>The user must enter a pairing code (default of 000000) to connect. HID allows the bean to act as a mouse, keyboard, or media control device.</para><para>Important: When disconnecting from a device, you must manually forget Bean in the system&apos;s Bluetooth settings as well as Bean Loader. </para></description>
      <memberdef kind="function" id="class_bean_hid_class_1a13765378242667b5be0cd50ae2da2afd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanHidClass::enable</definition>
        <argsstring>(void)</argsstring>
        <name>enable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function turns on the Bean&apos;s HID functionality. It will require pairing using a pin code with your device and if you wish to disconnect it you must disconnect through your devices bluetooth system settings menu.</para><para>HID may not work well with other profiles such as ANCS or MIDI. Use multiple profiles simultaneously at your own risk.</para><para>You may need to power cycle Bean after enabling HID.</para><para><heading level="1">Examples</heading>
</para><para>This sketch demonstrates how to use Bean as a HID peripheral. Bean will move a mouse pointer around the screen when it&apos;s tilted side to side, forward, and back. Sending ASCII &apos;1&apos; via Virtual Serial will cause Bean to type &quot;Hello, world!&quot;, and sending &apos;2&apos; will cause Bean to send the Play media key.</para><para><programlisting><codeline><highlight class="normal">void<sp/>setup()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>BeanHid.enable();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Serial<sp/>port<sp/>is<sp/>initialized<sp/>automatically;<sp/>we<sp/>don&apos;t<sp/>have<sp/>to<sp/>do<sp/>anything</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">void<sp/>loop()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>AccelerationReading<sp/>accel<sp/>=<sp/>Bean.getAcceleration();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>int16_t<sp/>x<sp/>=<sp/>accel.xAxis;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int16_t<sp/>y<sp/>=<sp/>accel.yAxis;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int16_t<sp/>z<sp/>=<sp/>accel.zAxis;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Add<sp/>a<sp/>deadzone.<sp/>If<sp/>Bean<sp/>is<sp/>reasonabally<sp/>flat,<sp/>don&apos;t<sp/>move<sp/>the<sp/>mouse<sp/>pointer</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(abs(x)<sp/>&lt;<sp/>20)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(abs(y)<sp/>&lt;<sp/>20)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>we<sp/>want<sp/>to<sp/>map<sp/>the<sp/>movements<sp/>to<sp/>reasonable<sp/>values.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>This<sp/>constrains<sp/>the<sp/>accelerometer<sp/>to<sp/>-20<sp/>to<sp/>20.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int16_t<sp/>mousex<sp/>=<sp/>map(x,<sp/>-60,<sp/>60,<sp/>-20,<sp/>20);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int16_t<sp/>mousey<sp/>=<sp/>map(y,<sp/>-60,<sp/>60,<sp/>20,<sp/>-20);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>BeanHid.moveMouse(mousex,<sp/>mousey);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>if<sp/>(Serial.available())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>byte<sp/>read<sp/>=<sp/>Serial.read();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(read<sp/>==<sp/>&apos;1&apos;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>send<sp/>the<sp/>ASCII<sp/>number<sp/>1<sp/>to<sp/>type<sp/>a<sp/>message</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BeanHid.sendKeys(&quot;Hello,<sp/>world!&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>else<sp/>if<sp/>(read<sp/>==<sp/>&apos;2&apos;)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>send<sp/>the<sp/>ASCII<sp/>number<sp/>2<sp/>to<sp/>use<sp/>a<sp/>media<sp/>command</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BeanHid.sendMediaControl(PLAY);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/BeanHID.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_hid_class_1afd8c0eec7e3104ae14cd538e954d8306" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool BeanHidClass::isEnabled</definition>
        <argsstring>(void)</argsstring>
        <name>isEnabled</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if HID is enabled </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/BeanHID.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_hid_class_1afa5abdeac9960f5461b78efa58880abf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanHidClass::disable</definition>
        <argsstring>(void)</argsstring>
        <name>disable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Disables the HID functionality.</para><para>If Bean has been paired with another device, you must un-pair Bean from that device manually.</para><para>You may need to power cycle Bean after disabling HID. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/BeanHID.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_hid_class_1a5e80e1a866e97a27ee57e9361864aa01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BeanHidClass::holdKey</definition>
        <argsstring>(char key)</argsstring>
        <name>holdKey</name>
        <param>
          <type>char</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Holds a key down. Takes any ascii character. Can hold a max of 6 character keys. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>single character key </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if success 0 if failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/BeanHID.h" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_hid_class_1aa32f0b43c31a36450899b84e13cfb18c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BeanHidClass::holdKey</definition>
        <argsstring>(modifierKey key)</argsstring>
        <name>holdKey</name>
        <param>
          <type>modifierKey</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Holds a key down. takes any modifier key specified by modifierKey. Does not affect a users keyboard (sending hold shift won&apos;t type capital letters when you press them on your keyboard) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>takes a modifier key to hold down. Can hold down all 8 of the first 8 modifier keys. The keys that come after the first 8 are counted as standard keys and therefore part of the 6 character keys. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/BeanHID.h" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_hid_class_1aa55a6740f7eb7586a02acc4e285308d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BeanHidClass::releaseKey</definition>
        <argsstring>(char key)</argsstring>
        <name>releaseKey</name>
        <param>
          <type>char</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Releases a key. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>the key to release in character form </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/BeanHID.h" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_hid_class_1a776d559506390cb3ee9068cfdbfe78f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BeanHidClass::releaseKey</definition>
        <argsstring>(modifierKey key)</argsstring>
        <name>releaseKey</name>
        <param>
          <type>modifierKey</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Releases a key. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>the key to release of type modifierKey </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if success 0 if failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/BeanHID.h" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_hid_class_1a0301c3d8352555b033cc1499c8660ddb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanHidClass::releaseAllKeys</definition>
        <argsstring>()</argsstring>
        <name>releaseAllKeys</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Releases all currently held keys </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/BeanHID.h" line="176" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_hid_class_1adba60b7a4ff098727a0df2afa2ee5b97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BeanHidClass::sendKey</definition>
        <argsstring>(char key)</argsstring>
        <name>sendKey</name>
        <param>
          <type>char</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sends a full keypress event. Like calling holdKey then releaseKey <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>the key to send in character form </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if success 0 if failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/BeanHID.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_hid_class_1a9608d4e79b947b2f43209edcfe874a6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BeanHidClass::sendKey</definition>
        <argsstring>(modifierKey key)</argsstring>
        <name>sendKey</name>
        <param>
          <type>modifierKey</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sends a full keypress event. Like calling holdKey then releaseKey <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>the key to send of type modifierKey </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if success 0 if failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/BeanHID.h" line="190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_hid_class_1a89d770aed9c9e5fb66ce5fd33889c328" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int BeanHidClass::sendKeys</definition>
        <argsstring>(String charsToType)</argsstring>
        <name>sendKeys</name>
        <param>
          <type>String</type>
          <declname>charsToType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sends a string of characters as keyboard events <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>charsToType</parametername>
</parameternamelist>
<parameterdescription>
<para>a String of characters for the keyboard to emulate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if success 0 if failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/BeanHID.h" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_hid_class_1aa7f4a73aa962ec437f5a929df9142167" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanHidClass::moveMouse</definition>
        <argsstring>(signed char delta_x, signed char delta_y, signed char delta_wheel=0)</argsstring>
        <name>moveMouse</name>
        <param>
          <type>signed char</type>
          <declname>delta_x</declname>
        </param>
        <param>
          <type>signed char</type>
          <declname>delta_y</declname>
        </param>
        <param>
          <type>signed char</type>
          <declname>delta_wheel</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sends a mouse move command <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>delta_x</parametername>
</parameternamelist>
<parameterdescription>
<para>a signed 8 bit value for how many pixels to move the mouse in the x direction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta_y</parametername>
</parameternamelist>
<parameterdescription>
<para>a signed 8 bit value for how many pixels to move the mouse in the y direction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta_wheel</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional signed 8 bit balue for how many clicks to move the mouse wheel </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/BeanHID.h" line="205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_hid_class_1a98a401af2c7eb990164a9c00999906f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanHidClass::holdMouseClick</definition>
        <argsstring>(mouseButtons button=MOUSE_LEFT)</argsstring>
        <name>holdMouseClick</name>
        <param>
          <type>mouseButtons</type>
          <declname>button</declname>
          <defval>MOUSE_LEFT</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Holds a mouse button down <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>button</parametername>
</parameternamelist>
<parameterdescription>
<para>the button to hold of type mouseButtons. Defaults to MOUSE_LEFT. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/BeanHID.h" line="212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_hid_class_1ae9ecc9e80b67ac1fcedd31d27b5a4fc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanHidClass::releaseMouseClick</definition>
        <argsstring>(mouseButtons button=MOUSE_LEFT)</argsstring>
        <name>releaseMouseClick</name>
        <param>
          <type>mouseButtons</type>
          <declname>button</declname>
          <defval>MOUSE_LEFT</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Releases a mouse button. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>button</parametername>
</parameternamelist>
<parameterdescription>
<para>the button to release of type mouseButtons. Defaults to MOUSE_LEFT. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/BeanHID.h" line="218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_hid_class_1a77f302f0aab20d303c2c78ab82b539a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanHidClass::sendMouseClick</definition>
        <argsstring>(mouseButtons button=MOUSE_LEFT)</argsstring>
        <name>sendMouseClick</name>
        <param>
          <type>mouseButtons</type>
          <declname>button</declname>
          <defval>MOUSE_LEFT</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sends a mouse hold then a mouse release command. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>button</parametername>
</parameternamelist>
<parameterdescription>
<para>the button to click of type mouseButtons. Defaults to MOUSE_LEFT. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/BeanHID.h" line="224" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_hid_class_1a8bafed3a93633321757dd15153edf2dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanHidClass::sendMediaControl</definition>
        <argsstring>(mediaControl command)</argsstring>
        <name>sendMediaControl</name>
        <param>
          <type>mediaControl</type>
          <declname>command</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sends a media control command command of type mediaControl. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>takes a media control command of type mediaControl </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/BeanHID.h" line="230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_hid_class_1af598e4203d6d7f5dbbb1fe6a48457f9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanHidClass::holdMediaControl</definition>
        <argsstring>(mediaControl command)</argsstring>
        <name>holdMediaControl</name>
        <param>
          <type>mediaControl</type>
          <declname>command</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Holds a media control command command of type mediaControl. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>takes a media control command of type mediaControl </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/BeanHID.h" line="236" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_hid_class_1a0741bb83d801168ff5f1b58c0cf51ccf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanHidClass::releaseMediaControl</definition>
        <argsstring>(mediaControl command)</argsstring>
        <name>releaseMediaControl</name>
        <param>
          <type>mediaControl</type>
          <declname>command</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Releases a media control command command of type mediaControl. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>command</parametername>
</parameternamelist>
<parameterdescription>
<para>takes a media control command of type mediaControl </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/BeanHID.h" line="242" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_hid_class_1a438a17883bef87cd43ec0b9dde0b8a0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanHidClass::releaseAllMediaControls</definition>
        <argsstring>()</argsstring>
        <name>releaseAllMediaControls</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Releases all currently held media control commands </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/BeanHID.h" line="247" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_bean_hid_class_1af12f08c58de388f46020564d3aa2802f" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool BeanHidClass::isShiftHeld</definition>
        <argsstring></argsstring>
        <name>isShiftHeld</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/BeanHID.h" line="251" column="1" bodyfile="hardware/bean/avr/cores/bean/BeanHID.h" bodystart="251" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_bean_hid_class_1af053ee094a0d14226ec7eb5e54527ef5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanHidClass::buttons</definition>
        <argsstring>(uint8_t b)</argsstring>
        <name>buttons</name>
        <param>
          <type>uint8_t</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/BeanHID.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_hid_class_1a81c000dbc4c05aa4094417d7f79e1849" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanHidClass::_genericSendReport</definition>
        <argsstring>(uint8_t id, uint8_t *buffer, size_t length)</argsstring>
        <name>_genericSendReport</name>
        <param>
          <type>uint8_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/BeanHID.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_hid_class_1acab51fa301656dd6f2344e4e574625d3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanHidClass::sendReport</definition>
        <argsstring>(MouseReport *pReport)</argsstring>
        <name>sendReport</name>
        <param>
          <type><ref refid="struct_mouse_report" kindref="compound">MouseReport</ref> *</type>
          <declname>pReport</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/BeanHID.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_hid_class_1a0e3451eb15092f96bdc4df7d0f697270" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanHidClass::sendReport</definition>
        <argsstring>(KeyReport *pReport)</argsstring>
        <name>sendReport</name>
        <param>
          <type><ref refid="struct_key_report" kindref="compound">KeyReport</ref> *</type>
          <declname>pReport</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/BeanHID.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_hid_class_1a69aa34e0948549d00b2cf1646716df16" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void BeanHidClass::sendReport</definition>
        <argsstring>(CcReport *pReport)</argsstring>
        <name>sendReport</name>
        <param>
          <type><ref refid="struct_cc_report" kindref="compound">CcReport</ref> *</type>
          <declname>pReport</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/BeanHID.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_hid_class_1a7b48e1fc33591b15ef2f696f29b3dcaf" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t BeanHidClass::_holdKey</definition>
        <argsstring>(uint8_t c)</argsstring>
        <name>_holdKey</name>
        <param>
          <type>uint8_t</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/BeanHID.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_hid_class_1a96a0a7be05fa6ea0c441e28ae9d275cc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t BeanHidClass::_releaseKey</definition>
        <argsstring>(uint8_t c)</argsstring>
        <name>_releaseKey</name>
        <param>
          <type>uint8_t</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/BeanHID.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="class_bean_hid_class_1a9445ac0f1afa3c0bdfe99e64f0ab0bcf" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t BeanHidClass::_sendKey</definition>
        <argsstring>(uint8_t c)</argsstring>
        <name>_sendKey</name>
        <param>
          <type>uint8_t</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/BeanHID.h" line="101" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_bean_hid_class_1a80cc62d85705a57299f9a4b316f2d9c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>BeanHidClass::BeanHidClass</definition>
        <argsstring>(void)</argsstring>
        <name>BeanHidClass</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hardware/bean/avr/cores/bean/BeanHID.h" line="104" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="hardware/bean/avr/cores/bean/BeanHID.h" line="92" column="1" bodyfile="hardware/bean/avr/cores/bean/BeanHID.h" bodystart="92" bodyend="252"/>
    <listofallmembers>
      <member refid="class_bean_hid_class_1a81c000dbc4c05aa4094417d7f79e1849" prot="private" virt="non-virtual"><scope>BeanHidClass</scope><name>_genericSendReport</name></member>
      <member refid="class_bean_hid_class_1a7b48e1fc33591b15ef2f696f29b3dcaf" prot="private" virt="non-virtual"><scope>BeanHidClass</scope><name>_holdKey</name></member>
      <member refid="class_bean_hid_class_1a96a0a7be05fa6ea0c441e28ae9d275cc" prot="private" virt="non-virtual"><scope>BeanHidClass</scope><name>_releaseKey</name></member>
      <member refid="class_bean_hid_class_1a9445ac0f1afa3c0bdfe99e64f0ab0bcf" prot="private" virt="non-virtual"><scope>BeanHidClass</scope><name>_sendKey</name></member>
      <member refid="class_bean_hid_class_1a80cc62d85705a57299f9a4b316f2d9c7" prot="public" virt="non-virtual"><scope>BeanHidClass</scope><name>BeanHidClass</name></member>
      <member refid="class_bean_hid_class_1af053ee094a0d14226ec7eb5e54527ef5" prot="private" virt="non-virtual"><scope>BeanHidClass</scope><name>buttons</name></member>
      <member refid="class_bean_hid_class_1afa5abdeac9960f5461b78efa58880abf" prot="public" virt="non-virtual"><scope>BeanHidClass</scope><name>disable</name></member>
      <member refid="class_bean_hid_class_1a13765378242667b5be0cd50ae2da2afd" prot="public" virt="non-virtual"><scope>BeanHidClass</scope><name>enable</name></member>
      <member refid="class_bean_hid_class_1a5e80e1a866e97a27ee57e9361864aa01" prot="public" virt="non-virtual"><scope>BeanHidClass</scope><name>holdKey</name></member>
      <member refid="class_bean_hid_class_1aa32f0b43c31a36450899b84e13cfb18c" prot="public" virt="non-virtual"><scope>BeanHidClass</scope><name>holdKey</name></member>
      <member refid="class_bean_hid_class_1af598e4203d6d7f5dbbb1fe6a48457f9b" prot="public" virt="non-virtual"><scope>BeanHidClass</scope><name>holdMediaControl</name></member>
      <member refid="class_bean_hid_class_1a98a401af2c7eb990164a9c00999906f3" prot="public" virt="non-virtual"><scope>BeanHidClass</scope><name>holdMouseClick</name></member>
      <member refid="class_bean_hid_class_1afd8c0eec7e3104ae14cd538e954d8306" prot="public" virt="non-virtual"><scope>BeanHidClass</scope><name>isEnabled</name></member>
      <member refid="class_bean_hid_class_1af12f08c58de388f46020564d3aa2802f" prot="private" virt="non-virtual"><scope>BeanHidClass</scope><name>isShiftHeld</name></member>
      <member refid="class_bean_hid_class_1aa7f4a73aa962ec437f5a929df9142167" prot="public" virt="non-virtual"><scope>BeanHidClass</scope><name>moveMouse</name></member>
      <member refid="class_bean_hid_class_1a0301c3d8352555b033cc1499c8660ddb" prot="public" virt="non-virtual"><scope>BeanHidClass</scope><name>releaseAllKeys</name></member>
      <member refid="class_bean_hid_class_1a438a17883bef87cd43ec0b9dde0b8a0e" prot="public" virt="non-virtual"><scope>BeanHidClass</scope><name>releaseAllMediaControls</name></member>
      <member refid="class_bean_hid_class_1aa55a6740f7eb7586a02acc4e285308d1" prot="public" virt="non-virtual"><scope>BeanHidClass</scope><name>releaseKey</name></member>
      <member refid="class_bean_hid_class_1a776d559506390cb3ee9068cfdbfe78f3" prot="public" virt="non-virtual"><scope>BeanHidClass</scope><name>releaseKey</name></member>
      <member refid="class_bean_hid_class_1a0741bb83d801168ff5f1b58c0cf51ccf" prot="public" virt="non-virtual"><scope>BeanHidClass</scope><name>releaseMediaControl</name></member>
      <member refid="class_bean_hid_class_1ae9ecc9e80b67ac1fcedd31d27b5a4fc6" prot="public" virt="non-virtual"><scope>BeanHidClass</scope><name>releaseMouseClick</name></member>
      <member refid="class_bean_hid_class_1adba60b7a4ff098727a0df2afa2ee5b97" prot="public" virt="non-virtual"><scope>BeanHidClass</scope><name>sendKey</name></member>
      <member refid="class_bean_hid_class_1a9608d4e79b947b2f43209edcfe874a6a" prot="public" virt="non-virtual"><scope>BeanHidClass</scope><name>sendKey</name></member>
      <member refid="class_bean_hid_class_1a89d770aed9c9e5fb66ce5fd33889c328" prot="public" virt="non-virtual"><scope>BeanHidClass</scope><name>sendKeys</name></member>
      <member refid="class_bean_hid_class_1a8bafed3a93633321757dd15153edf2dc" prot="public" virt="non-virtual"><scope>BeanHidClass</scope><name>sendMediaControl</name></member>
      <member refid="class_bean_hid_class_1a77f302f0aab20d303c2c78ab82b539a0" prot="public" virt="non-virtual"><scope>BeanHidClass</scope><name>sendMouseClick</name></member>
      <member refid="class_bean_hid_class_1acab51fa301656dd6f2344e4e574625d3" prot="private" virt="non-virtual"><scope>BeanHidClass</scope><name>sendReport</name></member>
      <member refid="class_bean_hid_class_1a0e3451eb15092f96bdc4df7d0f697270" prot="private" virt="non-virtual"><scope>BeanHidClass</scope><name>sendReport</name></member>
      <member refid="class_bean_hid_class_1a69aa34e0948549d00b2cf1646716df16" prot="private" virt="non-virtual"><scope>BeanHidClass</scope><name>sendReport</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
